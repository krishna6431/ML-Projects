# -*- coding: utf-8 -*-
"""ML_Assignment-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18HEqjosbdJTrx5HYXzxyVTd3mZ01Xz3_

Name : Krishna Kant Verma <br>
Roll No : 2211CS19<br>
Machine Learning Assignment - 1<br>
Implementation of K_means and K_Mediod Clustering Algorithm<br>

# New section

Installation of Scikit-Learn
"""

pip install scikit-learn-extra

"""Importing all the required library

"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
# Kmeans Algorithms
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
# K mediod Algorithm
from sklearn_extra.cluster import KMedoids
# google collab required library
from google.colab import files
# for plotting the graph
import seaborn as sns

"""Setting Up and Fetching the DataSet"""

# fetching dataset from google drive
# Location : "/content/drive/MyDrive/Clustering_DataSets/Country_Data/Country-data.csv"
dataSetPath="/content/drive/MyDrive/Clustering_DataSets/Country_Data/Country-data.csv"

# reading the csv file
dataFrame = pd.read_csv(dataSetPath)

# printing head of the data
dataFrame.head()

# it will shows all the important feature of the datasets
dataFrame.describe()

# cheking all the columns label present in the datasets
dataFrame.columns

"""Correlation Matrix of Given Datasets"""

# printing the correlation matrix of the given datasets
plt.figure(figsize = (18, 9))
sns.heatmap(dataFrame.corr(), annot = True, cmap="YlOrBr")
plt.show()

dataFrame.info()
## Here There is no NULL Value or Missing Value Found so we can skip the Data Cleaning Step

# printing the dataframe head
dataFrame.head()

"""Scaling the Datasets using StandardScaler"""

## using StandardScaler for scalling the data. and converting the data into standard form
scaler=StandardScaler()
scaledDataFrame=scaler.fit_transform(dataFrame.iloc[:,1:])

# printing scaled dataframe
print(scaledDataFrame)

# creating dataframe from the numpy array
scaledDataFrame=pd.DataFrame(scaledDataFrame,columns=dataFrame.iloc[:,1:].columns, index=dataFrame.index)

# printing dataframe for check
scaledDataFrame

# storing the scaleddata frame values into data for future use
data = scaledDataFrame.values

# printing the values stored in data
print(data)

"""Silhoutte Score for Varying Size Cluster for K-Means


"""

#Plotting silhouette score for clusters for different cluster size using K-Means
shlt_score_1={}
cluster_range = list(range(2,20,1))
# iterating over all ranges from 2 to 20
for clusterNum in cluster_range:
    kmeans = KMeans(n_clusters=clusterNum,random_state=60,max_iter=50 )
    kmeans.fit(data)
    silhouette_avg = silhouette_score(data, kmeans.labels_)
    shlt_score_1[clusterNum]=silhouette_avg
print("Silhouette Score(K-Means)")
print(f'Silhouettes score/cluster: {shlt_score_1} \n ')
# plotting the graph
plt.figure(figsize=(18, 9))
plt.plot(list(shlt_score_1.keys()),list(shlt_score_1.values()),color='purple')
plt.xlabel('N. of clusters')
plt.ylabel('Silhouette score')

"""Silhoutte Score for Varying Size Cluster for K-Mediod"""

#Plotting silhouette score for clusters of different sizes using K-Medoid
shlt_score_2={}
cluster_range = list(range(2,20,1))
# iterating over all ranges from 2 to 20
for clusterNum in cluster_range:
    kmedoids = KMedoids(n_clusters=clusterNum,random_state=0, method="pam" ,max_iter=20)
    kmedoids.fit(data)
    silhouette_avg = silhouette_score(data, kmedoids.labels_)
    shlt_score_2[clusterNum]=silhouette_avg

print("Silhouette Score(K-Medoid)")
print(f'Silhouettes score/cluster: {shlt_score_2} \n ')
# plotting the graph
plt.figure(figsize=(18, 9))
plt.plot(list(shlt_score_2.keys()),list(shlt_score_2.values()),color='purple')
plt.xlabel('No. of clusters')
plt.ylabel('Silhouette score')

"""Applying K-Means Clustering Algorithm"""

# K-Means for 3-clusters
kmeans = KMeans(n_clusters=3, random_state= 30,max_iter=50)
kmeans.fit(data)
print(f'Cluster Labels: {kmeans.labels_}')

#Silhouette score for 3-clusters
shlt_score_kmeans= silhouette_score(data, kmeans.labels_)
print(f'Silhouette Score for K-Means: {shlt_score_kmeans}')
kmeans.labels_
labels = kmeans.labels_
country = dataFrame.iloc[:,0]
clusters1=pd.DataFrame({'country':country,'label':labels})
dataFrame_kmeans = scaledDataFrame
dataFrame_kmeans['label']=labels
clusters1

"""Applying K-Mediod Clustering Algorithm"""

#Applying K-Medoid for 3-clusters
kmedoids = KMedoids(n_clusters=3, random_state=20,method="pam")
kmedoids.fit(data)
print(f' Labels: {kmedoids.labels_}')

#Silhouette score for 3-clusters
shlt_score_kmed= silhouette_score(data, kmedoids.labels_)
print(f' Silhouette Score for K-Medoids: {shlt_score_kmed}')

kmedoids.labels_
labels = kmedoids.labels_
print(labels)
clusters2=pd.DataFrame({'country':country,'label':labels})
clusters2
dataFrame_kmed = scaledDataFrame
dataFrame_kmed['label']=labels
dataFrame_kmed

"""Description of the cluster formed using both the algorithms"""

#Description of every cluster formed using K-Means
description = dataFrame_kmeans.groupby("label")['child_mort', 'exports', 'health', 'imports', 'income', 'inflation', 'life_expec', 'total_fer', 'gdpp', 'label']
clientsNum = description.size()
description = description.mean()
description['clientsNum'] = clientsNum
print(description)

#Description of all the  cluster formed using K-Medoid
description = dataFrame_kmed.groupby("label")['child_mort', 'exports', 'health', 'imports', 'income', 'inflation', 'life_expec', 'total_fer', 'gdpp', 'label']
clientsNum = description.size()
description = description.mean()
description['clientsNum'] = clientsNum
print(description)

"""Plotting Scatter Plot for Both the Clustering Algorithm"""

#Scatter plot for K-means
dataFrame0 = dataFrame_kmeans[dataFrame_kmeans['label'] == 0]
dataFrame1 = dataFrame_kmeans[dataFrame_kmeans['label'] == 1]
dataFrame2 =dataFrame_kmeans[dataFrame_kmeans['label'] == 2]
# plotting the graph
plt.figure(figsize=(8, 6), dpi=80)
plt.scatter(dataFrame0['income'], dataFrame0['gdpp'], c='blue', s=10, label='Cluster A')
plt.scatter(dataFrame1['income'], dataFrame1['gdpp'], c='red', s=10, label='Cluster B')
plt.scatter(dataFrame2['income'], dataFrame2['gdpp'], c='green', s=10, label='Cluster C')
# assigning labels to the axis
plt.xlabel('Net income per person')
plt.ylabel('GDP per capita')
plt.legend(),
plt.show

#Scatter plot for K-mediod
dataFrame0 = dataFrame_kmed[dataFrame_kmed['label'] == 0]
dataFrame1 = dataFrame_kmed[dataFrame_kmed['label'] == 1]
dataFrame2 = dataFrame_kmed[dataFrame_kmed['label'] == 2]

# plotting the graph
plt.figure(figsize=(8, 6), dpi=80)
plt.scatter(dataFrame0['income'], dataFrame0['gdpp'], c='blue', s=10, label='Cluster A')
plt.scatter(dataFrame1['income'], dataFrame1['gdpp'], c='red', s=10, label='Cluster B')
plt.scatter(dataFrame2['income'], dataFrame2['gdpp'], c='green', s=10, label='Cluster C')
# assigning labels to the axis
plt.xlabel('Net income per person')
plt.ylabel('GDP per capita')
plt.legend(),
plt.show

"""Plotting Pair-Plot of Using Both Algorithm"""

# pair plot for k-means clustering
sns.pairplot(dataFrame_kmeans, hue='label')

# pair plot fot k-mediod clustering
sns.pairplot(dataFrame_kmed, hue='label')

# printing the head of the the k-measns dataframe
dataFrame_kmeans.head(20)

"""Count of the Country clustered in Each cluster"""

# for K-means
dataFrame_kmeans.label.value_counts()

# for k-mediod
dataFrame_kmed.label.value_counts()

"""Setting the DataFrames"""

print(dataFrame)
extracted_col = dataFrame["country"]
print(extracted_col)
# dataFrame_kmeans.insert(0,"country",extracted_col)
# dataFrame_kmed.insert(0,"country",extracted_col)
dataFrame_kmeans