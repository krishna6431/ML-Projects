# -*- coding: utf-8 -*-
"""assignment_ML_FFNN_RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gszzTay-Ntxr-FAPgFVAlZZcIoYWXI9t

#importing all required library
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from sklearn.metrics import accuracy_score
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Conv2D, Dense, Flatten, Dropout, LSTM
from tensorflow.keras.layers import GlobalMaxPooling2D, MaxPooling2D
from tensorflow.keras.models import Model
from tensorflow.keras import regularizers, optimizers
from tensorflow.keras.utils import to_categorical
#import visualkeras

"""# Importing the cifar-10 dataset from Keras """

from tensorflow.keras.datasets import cifar10
(X_train, Y_train), (X_test, Y_test) = cifar10.load_data()

print('x_train Shape: {}'.format(X_train.shape))
print('x_test Shape: {}'.format(X_test.shape))
print('y_train Shape: {}'.format(Y_train.shape))
print('y_test Shape: {}'.format(Y_test.shape))

plt.figure()
plt.imshow(X_train[1000])
plt.colorbar()

X_train = X_train/255
X_test = X_test/255

# One-Hot-Encoding
Y_train_en = to_categorical(Y_train,10)
Y_test_en = to_categorical(Y_test,10)

Y_train_en

"""# Visualization of Dataset"""

for i in range(1,31):
  plt.subplot(2, 15, i)
  plt.imshow(X_train[i])

"""# Base Model"""

model = Sequential()
model.add(Conv2D(1024,(4,4),input_shape=(32,32,3),activation='relu'))
model.add(Conv2D(512,(4,4),input_shape=(32,32,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.4)) 
model.add(Conv2D(256,(4,4),input_shape=(32,32,3),activation='relu'))
model.add(Conv2D(128,(4,4),input_shape=(32,32,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.4))
model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(units =10  , activation = 'softmax'))
model.compile(loss='categorical_crossentropy',optimizer='SGD',metrics=['accuracy'])

model.summary()
history = model.fit(X_train, Y_train_en, epochs = 10, verbose=1,validation_data=(X_test,Y_test_en))

"""#Architecture of Model"""

from tensorflow.keras.utils import plot_model
plot_model(model, to_file='cnn_plot.png', show_shapes=True, show_layer_names=True)

evaluation = model.evaluate(X_test, Y_test_en)
print('Test Accuracy of Model_1(with Dropouts): {}'.format(evaluation[1]))

def plotloss(history_1):
    plt.plot(history_1.history['loss'])
    plt.plot(history_1.history['val_loss'])
    plt.plot(history_1.history['accuracy'])
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend(['Train', 'Validation', 'Accuracy'])
    plt.show()    
plotloss(history)

"""#Data Preprocessing for RNN"""

img = np.float32(X_train[0])
k1=(img[:,:,0]+img[:,:,1]+img[:,:,2])/3;
k1

img_float32

X_train_grayscale = np.zeros(X_train.shape[:-1])
X_test_grayscale = np.zeros(X_test.shape[:-1])
for i in range(X_train.shape[0]): 
    img = np.float32(X_train[0])
    k1=(img[:,:,0]+img[:,:,1]+img[:,:,2])/3;
    X_train_grayscale[i] = k1
for i in range(X_test.shape[0]): 
    img = np.float32(X_train[0])
    k1=(img[:,:,0]+img[:,:,1]+img[:,:,2])/3;
    X_test_grayscale[i] = k1

"""#Creation of RNN Model"""

model1 = keras.Sequential()
model1.add(Input(shape=(32,32)),)
model1.add(layers.GRU(1024))
model1.add(layers.Dense(10))
model1.compile(loss='categorical_crossentropy',optimizer='SGD',metrics=['accuracy'])

"""#Architecture of Model"""

plot_model(model1, to_file='rnn_plot.png', show_shapes=True, show_layer_names=True)

np.shape(X_train_grayscale)
np.shape(Y_train_en)

model1.summary()
history1= model1.fit(np.array(X_train_grayscale), np.array(Y_train_en), epochs = 10, verbose=1)

"""# Loss and Accuracy"""

def plotloss(history_1):
    plt.plot(history_1.history['loss'])
    plt.plot(history_1.history['accuracy'])
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend(['Train', 'Accuracy'])
    plt.show()    
plotloss(history1)